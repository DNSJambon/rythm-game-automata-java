Slime(Haut){
*(Haut):
| !Got(Power) ? Rest : ()
| Cell(F, V) ? Move(F) : (Waitbas)
| Cell(F, #) ? Hit(F) : (Haut)
| True ? Wait : (Waitbas)


*(Bas):
| !Got(Power) ? Rest : ()
| Cell(B, V) ? Move(B) : (Waithaut)
| Cell(B, #) ? Hit(B) : (Bas)
| True ? Wait : (Waithaut)

*(Waithaut):
| !Got(Power) ? Rest : ()
| True ? Wait : (Haut)

*(Waitbas):
| !Got(Power) ? Rest : ()  
| True ? Wait : (Bas)

*()
| True ? Wait : ()
}

Wall(S1){
*(S1):
| True ? Wait : (S1)
}

Player1(S1){
*(S1):
| !Got(Power) ? Rest : ()
| Key(d) & Cell(R, V)/Cell(R, P) ? Move(R) : (S1)
| Key(d) & Cell(R, E) ? Hit(R) : (S1)
| Key(z) & Cell(F, V)/Cell(F, P) ? Move(F) : (S1)
| Key(z) & Cell(F, E) ? Hit(F) : (S1)
| Key(s) & Cell(B, V)/Cell(B, P) ? Move(B) : (S1)
| Key(s) & Cell(B, E) ? Hit(B) : (S1)
| Key(q) & Cell(L, V)/Cell(L, P) ? Move(L) : (S1)
| Key(q) & Cell(L, E) ? Hit(L) : (S1)
| True ? Wait : (S1)

* ()
}

Suiveur(S1){
*(S1):
| !Got(Power) ? Rest : ()
| Closest(#, N) & Cell (F, V) ? Move(F) : (S1)
| Closest(#, S) & Cell (B, V) ? Move(B) : (S1)
| Closest(#, E) & Cell (R, V) ? Move(R) : (S1)
| Closest(#, W) & Cell (L, V) ? Move(L) : (S1)
| Cell (F, #) ? Hit (F) : (S1)
| Cell (B, #) ? Hit (B) : (S1)
| Cell (R, #) ? Hit (R) : (S1)
| Cell (L, #) ? Hit (L) : (S1)
| True ? Wait : (S1)
}

Player2(Init){
* (Init):
| Key(o) ? Move(F) :(Init)
| Key(k) ? Move(L) :(Init)
| Key(l) ? Move(B) :(Init)
| Key(m) ? Move(R) :(Init)
| Key(u) & Cell(H, V) ? Egg() :(Init)
| Key(p) & Cell(H, V) ? Pop() :(Init)
| Key(i) & Cell(H, V) ? Wizz() :(Init)
| True ? Wait : (Init)
}

Squelette(Left){
* (Left):
| !Got(Power) ? Rest : ()
| Cell(L, V) ? Move(L) : (Left)
| Cell(L, #) ? Hit(L) : (Left)
| Cell(R, V) ? Move(R) : (Right)
| Cell(R, #) ? Hit(R) : (Right)
| True ? Wait : (Right)

* (Right):
| !Got(Power) ? Rest : ()
| Cell(R, V) ? Move(R) : (Right)
| Cell(R, #) ? Hit(R) : (Right)
| Cell(L, V) ? Move(L) : (Left)
| Cell(L, #) ? Hit(L) : (Left)
| True ? Wait : (Left)

* ()
}


Key(S1){
*(S1):
| Cell(H, #) ? Pick : (S2)
| True ? Wait : (S1)
* (S2):
| True ? Wait : (S2)
}

Mage(Hit){
    *(Hit):
    |!Got(Power) ? Rest : ()
    |Cell(F,V)? Egg() : (Turn)
    |Cell(F,#)? Hit(F) : (Turn)
    |True? Wait : (Turn)
    *(Turn):
    |!Got(Power) ? Rest : ()
    |True? Turn(R) : (Hit)
    *()
}
Projectile(S1){
    *(S1):
    |Cell(F,V)? Move(F) : (S1)
    |Cell(F,#)? Hit(F) : ()
    |True ? Rest : ()
    *()
}

Trap(Init){
* (Init):
| Cell(H, #) ? Wait : (Activate)
| True ? Wait : (Init)
* (Activate):
| Cell(H, #) ? Hit(H) : (Activate)
| True ? Pop : (Activate)
}
Door(S1){
*(S1):
| Closest(K, N)  ? Pick : (S2)
| True ? Wait : (S1)
*(S2):
| Cell(H,#) ? Egg() : (S2)
| True ? Wait : (S2)
}
Wall_Breakable(Vivant){
*(Vivant):
| !Got(Power) ? Rest : (Dead)
| True ? Wait : (Vivant)
*(Dead):
*()
}




Sourischauve(Haut){
*(Haut):
| !Got(Power) ? Rest : ()
| Cell(F, V) ? Move(F) : (Waitdroite)
| Cell(F, #) ? Hit(F) : (Haut)
| True ? Wait : (Waitdroite)

*(Bas):
| !Got(Power) ? Rest : ()
| Cell(B, V) ? Move(B) : (Waitgauche)
| Cell(B, #) ? Hit(B) : (Bas)
| True ? Wait : (Waitgauche)

*(Gauche):
| !Got(Power) ? Rest : ()
| Cell(L, V) ? Move(L) : (Waithaut)
| Cell(L, #) ? Hit(L) : (Gauche)
| True ? Wait : (Waithaut)

*(Droite):
| !Got(Power) ? Rest : ()
| Cell(R, V) ? Move(R) : (Waitbas)
| Cell(R, #) ? Hit(R) : (Droite)
| True ? Wait : (Waitbas)

*(Waithaut):
| !Got(Power) ? Rest : ()
| True ? Wait : (Haut)

*(Waitbas):
| !Got(Power) ? Rest : ()  
| True ? Wait : (Bas)

*(Waitgauche):
| !Got(Power) ? Rest : ()
| True ? Wait : (Gauche)

*(Waitdroite):
| !Got(Power) ? Rest : ()
| True ? Wait : (Droite)

*()
| True ? Wait : ()
}

CarreWait(Haut){
*(Haut):
| !Got(Power) ? Rest : ()
| Cell(F, V) ? Move(F) : (Droite)
| Cell(F, #) ? Hit(F) : (Haut)
| True ? Wait : (Droite)

*(Bas):
| !Got(Power) ? Rest : ()
| Cell(B, V) ? Move(B) : (Gauche)
| Cell(B, #) ? Hit(B) : (Bas)
| True ? Wait : (Gauche)

*(Gauche):
| !Got(Power) ? Rest : ()
| Cell(L, V) ? Move(L) : (Haut)
| Cell(L, #) ? Hit(L) : (Gauche)
| True ? Wait : (Haut)

*(Droite):
| !Got(Power) ? Rest : ()
| Cell(R, V) ? Move(R) : (Bas)
| Cell(R, #) ? Hit(R) : (Droite)
| True ? Wait : (Bas)

*()
| True ? Wait : ()
}